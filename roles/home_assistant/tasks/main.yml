---
- import_tasks: ubuntu_setup.yml
  vars:
    packages:
      - autoconf
      - bluez
      - build-essential
      - dbus-broker
      - ffmpeg
      - freeipa-client
      - git
      - kstart
      - libatlas-base-dev
      - libbz2-dev
      - libffi-dev
      - libjpeg-dev
      - liblapack-dev
      - liblapack3
      - liblzma-dev
      - libmariadb-dev-compat
      - libncurses5-dev
      - libncursesw5-dev
      - libopenjp2-7
      - libpcap-dev
      - libreadline-dev
      - libsqlite3-dev
      - libssl-dev
      - libturbojpeg0-dev
      - libxml2-dev
      - libxmlsec1-dev
      - llvm
      - make
      - nfs-common
      - nfs4-acl-tools
      - python3
      - python3-dev
      - python3-pip
      - python3-venv
      - rdiff-backup
      - tk-dev
      - xz-utils
      - zlib1g-dev
  tags:
    - home_assistant

- import_tasks: idm_client_setup.yml
  vars:
    username: home_assistant
    password: '{{ homae_assistant.password }}'
    homedirectory: /opt/home_assistant
    loginshell: /usr/bin/bash
  tags:
    - home_assistant

- import_tasks: idm_service_setup.yml
  vars:
    service_principal_name: 'nfs/{{ container_hostname }}'
  tags:
    - home_assistant

- import_tasks: idm_systemd_user_setup.yml
  vars:
    username: home_assistant
    groupname: home_assistant
    wanted_by_unit: home_assistant.service
  tags:
    - home_assistant

- import_tasks: appdir_and_mountpoints_v4.yml
  vars:
    appdirs:
      - path: /config
        owner: home_assistant
        group: home_assistant
      - path: /opt/home_assistant
        owner: home_assistant
        group: home_assistant
    mountpoints:
      - src: '{{ backup_host_v4 }}:{{ backup_path_v4 }}'
        dest: /backups
        owner: nobody
        group: nogroup
  tags:
    - home_assistant

- name: Checkout pyenv
  ansible.builtin.git:
    repo: https://github.com/pyenv/pyenv.git
    dest: /home/home_assistant/.pyenv
  become: true
  become_user: home_assistant
  tags:
    - home_assistant

- name: copy the file used to setup pyenv
  ansible.builtin.copy:
    src: bashrc-pyenv
    dest: /home/home_assistant/.bashrc-pyenv
    mode: 0644
    owner: home_assistant
    group: home_assistant
  tags:
    - home_assistant

- name: Get the installed version
  ansible.builtin.shell:
    cmd: '. /home/home_assistant/.bashrc-pyenv && pyenv global'
    executable: /bin/bash
  become: true
  become_user: home_assistant
  register: pyenv_global_version
  changed_when: false
  tags:
    - home_assistant

- name: 'Build python {{ home_assistant_pyenv_version }}'
  ansible.builtin.shell:
    cmd: '. /home/home_assistant/.bashrc-pyenv && pyenv install -f {{ home_assistant_pyenv_version }} && pyenv global {{ home_assistant_pyenv_version }}'
    executable: /bin/bash
  become: true
  become_user: home_assistant
  when: home_assistant_pyenv_version != pyenv_global_version.stdout
  tags:
    - home_assistant

- name: Ensure the virtual environment is created
  ansible.builtin.shell:
    cmd: /home/home_assistant/.pyenv/shims/python3 -m venv venv
    chdir: /opt/home_assistant
  become: true
  become_user: home_assistant
  tags:
    - home_assistant

- name: Install Home Assistant and its dependencies into the venv
  ansible.builtin.pip:
    name:
      - certbot_dns_duckdns
      - 'homeassistant=={{ homeassistant_version }}'
      - mysqlclient
      - psycopg2-binary
    state: latest
    virtualenv: /opt/home_assistant/venv
    virtualenv_site_packages: true
  become: true
  become_user: home_assistant
  register: pip_install
  tags:
    - home_assistant

- name: Check if the cert exists
  ansible.builtin.stat:
    path: /config/letsencrypt/live/chezlawrence.duckdns.org/fullchain.pem
  become: true
  become_user: home_assistant
  register: duckdns_cert
  tags:
    - home_assistant

- name: Get duckdns wildcard cert
  ansible.builtin.command:
    argv:
      - /opt/home_assistant/venv/bin/certbot
      - certonly
      - --non-interactive
      - --agree-tos
      - '--email {{ letsencrypt_duckdns_email }}'
      - --preferred-challenges
      - dns
      - --authenticator
      - dns-duckdns
      - --dns-duckdns-token
      - '{{ letsencrypt_duckdns_token }}'
      - --dns-duckdns-propagation-seconds
      - 60
      - -d
      - '{{ letsencrypt_duckdns_url }}'
      - --config-dir
      - /config/letsencrypt
      - --work-dir
      - /config/letsencrypt
      - --logs-dir
      - /config/letsencrypt/logs
  become: true
  become_user: home_assistant
  ignore_errors: true
  when: not duckdns_cert.stat.exists
  tags:
    - home_assistant

- name: Creates a backup cron file under /etc/cron.d
  ansible.builtin.cron:
    name: certbot
    minute: '0'
    hour: '0,12'
    user: home_assistant
    job: '/opt/home_assistant/venv/bin/certbot renew --config-dir /config/letsencrypt --work-dir /config/letsencrypt --logs-dir /config/letsencrypt/logs'
    cron_file: certbot
  tags:
    - home_assistant

- name: Check that /config/home-assistant_v2.db exists
  ansible.builtin.stat:
    path: /config/home-assistant_v2.db
  register: home_assistant_v2_db
  tags:
    - home_assistant

- name: Restore the backup (if it exists and is necessary)
  ansible.builtin.command:
    cmd: rdiff-backup -r now --force /backups/home_assistant/ /config
  ignore_errors: true
  when: not home_assistant_v2_db.stat.exists
  tags:
    - home_assistant

- import_tasks: systemd_unit.yml
  vars:
    systemd_unit: 'home_assistant.service'
    state: '{{ pip_install.changed | ternary("restarted", "started") }}'
  tags:
    - home_assistant

- import_tasks: backup_v4.yml
  vars:
    backup_src: '/config'
    backup_dest: '/backups/home_assistant'
    backup_dir_name: home_assistant
    backup_owner: home_assistant
    backup_group: home_assistant
  tags:
    - home_assistant
