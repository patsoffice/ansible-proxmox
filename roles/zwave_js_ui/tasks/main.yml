---
- import_tasks: ubuntu_setup.yml
  vars:
    packages:
      - binutils
      - freeipa-client
      - kstart
      - nfs-common
      - nfs4-acl-tools
      - rdiff-backup
      - unzip
  tags:
    - zwave_js_ui

- import_tasks: idm_client_setup.yml
  vars:
    username: zwave
    groupname: zwave
    password: '{{ zwave_js_ui.password }}'
    homedirectory: /usr/src/app
    loginshell: /usr/bin/bash
  tags:
    - zwave_js_ui

- import_tasks: appdir_and_mountpoints_v4.yml
  vars:
    appdirs:
      - path: /usr/src/app
        owner: zwave
        group: zwave
      - path: /opt/zwave-js-ui
        owner: root
        group: root
    mountpoints:
      - src: '{{ backup_host_v4 }}:{{ backup_path_v4 }}'
        dest: /backups
        mode: '0775'
        owner: zwave
        group: zwave
  tags:
    - zwave_js_ui

- import_tasks: idm_service_setup.yml
  vars:
    service_principal_name: 'nfs/{{ container_hostname }}'
  tags:
    - zwave_js_ui

- import_tasks: idm_systemd_user_setup.yml
  vars:
    username: zwave
    groupname: zwave
  tags:
    - zwave_js_ui

- name: Get zwave-js-ui URL version
  ansible.builtin.set_fact:
    web_version: "{{ zwave_js_ui_package_url | regex_search('/v([\\d.]+)/', '\\1') | first }}"
  tags:
    - zwave_js_ui

- name: Check that /opt/zwave-js-ui/version.txt exists
  ansible.builtin.stat:
    path: /opt/zwave-js-ui/version.txt
  register: version_txt
  tags:
    - zwave_js_ui

- name: Get the installed version
  command: cat /opt/zwave-js-ui/version.txt
  register: version_txt_cmd
  when: version_txt.stat.exists
  changed_when: false
  tags:
    - zwave_js_ui

- name: Set the zwave-js-ui file version
  ansible.builtin.set_fact:
    installed_version: '{{ version_txt_cmd.stdout_lines[0] | default("missing") }}'
  tags:
    - zwave_js_ui

- name: Download latest zwave-js-ui
  ansible.builtin.get_url:
    url: '{{ zwave_js_ui_package_url }}'
    dest: /opt/zwave_js_ui.zip
  when: web_version != installed_version
  tags:
    - zwave_js_ui

- name: Extract the zwave-js-ui tarball
  ansible.builtin.unarchive:
    src: /opt/zwave_js_ui.zip
    dest: /opt/zwave-js-ui
    remote_src: true
  when: web_version != installed_version
  tags:
    - zwave_js_ui

- name: Remove the tarball
  ansible.builtin.file:
    path: /opt/zwave_js_ui.zip
    state: absent
  when: web_version != installed_version
  tags:
    - zwave_js_ui

- name: Set the zwave-js-ui version.txt file
  ansible.builtin.template:
    src: version.txt
    dest: /opt/zwave-js-ui/version.txt
    mode: 0644
    owner: root
    group: root
  when: web_version != installed_version
  tags:
    - zwave_js_ui

- name: Check that /usr/src/app/store/settings.json exists
  ansible.builtin.stat:
    path: /usr/src/app/store/settings.json
  register: settings_json
  tags:
    - zwave_js_ui

- name: Restore the backup (if it exists and is necessary)
  ansible.builtin.command:
    cmd: rdiff-backup --api-version 201 --force restore /backups/zwave-js-ui/ /usr/src/app/
  ignore_errors: true
  become: true
  become_user: zwave
  when: not settings_json.stat.exists
  tags:
    - zwave_js_ui

- name: Change dev node group
  ansible.builtin.file:
    path: /dev/z-wave
    state: file
    group: zwave
  tags:
    - zwave_js_ui

- import_tasks: systemd_unit.yml
  vars:
    systemd_unit: 'zwave-js-ui.service'
    state: '{{ (web_version != installed_version) | ansible.builtin.ternary("restarted", "started") }}'
  tags:
    - zwave_js_ui

- import_tasks: unbound_external_dns.yml
  tags:
    - zwave_js_ui

- import_tasks: reverse_proxy.yml
  tags:
    - zwave_js_ui

- import_tasks: backup_v4.yml
  vars:
    backup_src: '/usr/src/app'
    backup_dest: '/backups/zwave-js-ui'
    backup_dir_name: zwave-js-ui
    backup_owner: zwave
    backup_group: zwave
  tags:
    - zwave_js_ui
