---
- name: Download the repo key
  ansible.builtin.get_url:
    url: https://dl.cloudsmith.io/public/caddy/xcaddy/gpg.key
    dest: /usr/share/keyrings/xcaddy.key
  tags:
    - caddy

- name: Install the apt repo
  ansible.builtin.apt_repository:
    repo: "deb [signed-by=/usr/share/keyrings/xcaddy.key] https://dl.cloudsmith.io/public/caddy/xcaddy/deb/debian any-version main"
    state: present
    filename: caddy
  tags:
    - caddy

- import_tasks: ubuntu_setup.yml
  vars:
    packages:
      - apt-transport-https
      - corosync
      - freeipa-client
      - gnupg
      - jq
      - kstart
      - nfs-common
      - nfs4-acl-tools
      - pacemaker
      - software-properties-common
      - xcaddy
  tags:
    - caddy

- import_tasks: idm_client_setup.yml
  vars:
    username: caddy
    password: '{{ caddy.password }}'
    homedirectory: /config
    loginshell: /usr/bin/bash
  tags:
    - caddy

- import_tasks: appdir_and_mountpoints_v4.yml
  vars:
    appdirs:
      - path: /opt
        owner: root
        group: root
      - path: /config
        owner: caddy
        group: caddy
        mode: '0700'
      - path: /config/services.d
        owner: caddy
        group: caddy
        mode: '0700'
  tags:
    - caddy

- import_tasks: install_go.yml
  vars:
    go_version: "{{ caddy_go_version }}"
  tags:
    - caddy

- name: Check that /opt/caddy exists
  ansible.builtin.stat:
    path: /opt/caddy
  register: caddy_file
  tags:
    - caddy

- name: Get the installed caddy version
  ansible.builtin.shell:
    cmd: "/opt/caddy version | awk '{print $1}'"
  register: caddy_file_version
  when: caddy_file.stat.exists
  changed_when: false
  tags:
    - caddy

- name: Set a default caddy file version
  ansible.builtin.set_fact:
    caddy_file_version:
      stdout: 'missing'
  when: caddy_file_version.stdout is undefined
  tags:
    - caddy

- name: Build caddy
  ansible.builtin.shell:
    cmd: 'XCADDY_WHICH_GO=/opt/go/bin/go xcaddy build {{ caddy_version }} --with {{ caddy_dns_cloudflare }} --with {{ caddy_dns_route53 }} --with {{ caddy_dns_duckdns }} --output /opt/caddy'
  when: (caddy_version != caddy_file_version.stdout) or go_version_changed
  tags:
    - caddy

- name: copy the Caddyfile
  ansible.builtin.template:
    src: Caddyfile
    dest: /config/Caddyfile
    mode: 0600
    owner: caddy
    group: caddy
  register: caddyfile
  tags:
    - caddy

- import_tasks: rsyslog_conf.yml
  vars:
    syslog_identifier: "caddy"
  tags:
    - caddy

- import_tasks: systemd_unit.yml
  vars:
    systemd_unit: 'caddy.service'
    state: '{{ ((caddy_version != caddy_file_version.stdout) or caddyfile.changed or go_version_changed) | ansible.builtin.ternary("restarted", "started") }}'
  tags:
    - caddy

- import_tasks: systemd_unit.yml
  vars:
    systemd_unit: 'caddy-restarter.service'
  tags:
    - caddy

- import_tasks: systemd_unit.yml
  vars:
    systemd_unit: 'caddy-restarter.path'
    state: "started"
  tags:
    - caddy

- name: copy corosync.conf
  ansible.builtin.template:
    src: corosync.conf
    dest: /etc/corosync/corosync.conf
    mode: 0644
    owner: root
    group: root
  register: corosync_conf
  tags:
    - caddy

- name: copy the corosync authkey
  ansible.builtin.copy:
    src: authkey
    dest: /etc/corosync/authkey
    mode: 0400
    owner: root
    group: root
  register: corosync_authkey
  tags:
    - caddy

- name: ensure corosync is started or restarted
  ansible.builtin.systemd:
    state: '{{ (corosync_conf.changed or corosync_authkey.changed) | ansible.builtin.ternary("restarted", "started") }}'
    enabled: true
    name: corosync.service
  tags:
    - caddy

- name: ensure pacemaker is started or restarted
  ansible.builtin.systemd:
    state: '{{ (corosync_conf.changed or corosync_authkey.changed) | ansible.builtin.ternary("restarted", "started") }}'
    enabled: true
    name: pacemaker.service
  tags:
    - caddy

- name: Pause for 20 secounds to let corosync sync
  ansible.builtin.pause:
    seconds: 20
  when: corosync_conf.changed or corosync_authkey.changed
  tags:
    - caddy

- name: Check if VIP resource exists
  ansible.builtin.shell:
    cmd: "pcs resource config caddy_vip"
  register: caddy_vip
  changed_when: false
  ignore_errors: True
  tags:
    - caddy

- name: Create a VIP resource if one doesn't exist
  ansible.builtin.shell:
    cmd: "pcs resource create caddy_vip ocf:heartbeat:IPaddr2 ip={{ caddy_vip }} cidr_netmask=32 op monitor interval=10s meta migration-threshold=10"
  when: '"No resource found" in caddy_vip.stderr'
  tags:
    - caddy

- name: Check if systemd resource exists
  ansible.builtin.shell:
    cmd: "pcs resource config caddy_service"
  register: caddy_service
  changed_when: false
  ignore_errors: True
  tags:
    - caddy

- name: Create a systemd service resource if one doesn't exist
  ansible.builtin.shell:
    cmd: "pcs resource create caddy_service systemd:caddy op start timeout=60s op stop timeout=60s op monitor interval=20s timeout=30s"
  when: '"No resource found" in caddy_service.stderr'
  tags:
    - caddy

- name: Check if constraints exists
  ansible.builtin.shell:
    cmd: "pcs constraint config --output-format=cmd"
  register: caddy_constraints
  changed_when: false
  ignore_errors: True
  tags:
    - caddy

- name: Create the order constraint if one doesn't exist
  ansible.builtin.shell:
    cmd: "pcs constraint order start caddy_vip then start caddy_service"
  when: '"constraint order start caddy_vip then start caddy_service" not in caddy_constraints.stdout'
  tags:
    - caddy

- name: Create the colocation constraint if one doesn't exist
  ansible.builtin.shell:
    cmd: "pcs constraint colocation add caddy_service with caddy_vip INFINITY"
  when: '"constraint colocation add caddy_service with caddy_vip INFINITY" not in caddy_constraints.stdout'
  tags:
    - caddy
