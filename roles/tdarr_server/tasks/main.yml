---
- import_tasks: ubuntu_setup.yml
  vars:
    packages:
      - freeipa-client
      - kstart
      - nfs-common
      - nfs4-acl-tools
      - rdiff-backup
      - unzip
  tags:
    - tdarr_server

- import_tasks: idm_client_setup.yml
  vars:
    username: tdarr
    groupname: media
    homedirectory: /opt/tdarr
    loginshell: /usr/bin/bash
  tags:
    - tdarr_server

- import_tasks: idm_service_setup.yml
  vars:
    service_principal_name: 'nfs/{{ container_hostname }}'
  tags:
    - tdarr_server

- import_tasks: idm_systemd_user_setup.yml
  vars:
    username: tdarr
    groupname: media
  tags:
    - tdarr_server

- import_tasks: appdir_and_mountpoints_v4.yml
  vars:
    appdirs:
      - path: '/opt/tdarr/Tdarr_Server'
        owner: root
        group: root
      - path: '/opt/tdarr/server'
        owner: root
        group: root
      - path: '/opt/tdarr/server/Tdarr'
        owner: tdarr
        group: tdarr
      - path: '/opt/tdarr/configs'
        owner: tdarr
        group: tdarr
      - path: '/opt/tdarr/logs'
        owner: tdarr
        group: tdarr
    mountpoints:
      - src: '{{ backup_host_v4 }}:{{ backup_path_v4 }}'
        dest: /backups
        mode: '0770'
        owner: tdarr
        group: tdarr
      - src: '{{ movies_host_v4 }}:{{ movies_path_v4 }}'
        dest: /movies
        mode: '0775'
      - src: '{{ tv_host_v4 }}:{{ tv_path_v4 }}'
        dest: /tv
        mode: '0775'
      - src: '{{ transcode_host_v4 }}:{{ transcode_path_v4 }}'
        dest: /opt/tdarr/transcode-cache
        mode: '0775'
  tags:
    - tdarr_server

- name: Get tdarr server URL version
  ansible.builtin.set_fact:
    web_version: "{{ tdarr_server_package_url | regex_search('versions/([\\d.]+)/', '\\1') | first }}"
  tags:
    - tdarr_server

- name: Check that /opt/tdarr/version exists
  ansible.builtin.stat:
    path: /opt/tdarr/version
  register: tdarr_version
  tags:
    - tdarr_server

- name: Get the installed version
  ansible.builtin.shell:
    cmd: "cat /opt/tdarr/version"
  register: file_version
  when: tdarr_version.stat.exists
  changed_when: false
  tags:
    - tdarr_server

- name: Set a default tdarr file version
  ansible.builtin.set_fact:
    file_version:
      stdout: 'missing'
  when: file_version.stdout is undefined
  tags:
    - tdarr_server

- name: Download tdarr
  ansible.builtin.get_url:
    url: '{{ tdarr_server_package_url }}'
    dest: /opt/tdarr/Tdarr_Server.zip
  when: web_version != file_version.stdout
  tags:
    - tdarr_server

- name: Extract the tdarr server package
  ansible.builtin.unarchive:
    src: /opt/tdarr/Tdarr_Server.zip
    dest: /opt/tdarr/Tdarr_Server
    remote_src: true
  no_log: true
  when: web_version != file_version.stdout
  tags:
    - tdarr_server

- name: Remove the zip file
  ansible.builtin.file:
    path: /opt/tdarr/Tdarr_Server.zip
    state: absent
  when: web_version != file_version.stdout
  tags:
    - tdarr_server

- name: update the version
  ansible.builtin.template:
    src: 'version.txt'
    dest: '/opt/tdarr/version'
    mode: 0644
    owner: root
    group: root
  when: web_version != file_version.stdout
  tags:
    - tdarr_server

- name: copy the tdarr-server configuration
  ansible.builtin.copy:
    src: 'Tdarr_Server_Config.json'
    dest: '/opt/tdarr/configs'
    mode: 0644
    owner: root
    group: root
  tags:
    - tdarr_server

- name: Check that /opt/tdarr/server/Tdarr/DB2 exists
  ansible.builtin.stat:
    path: /opt/tdarr/server/Tdarr/DB2
  register: tdarr_db2
  tags:
    - tdarr_server

- name: Restore the backup (if it exists and is necessary)
  ansible.builtin.command:
    cmd: rdiff-backup --api-version 201 --force restore /backups/tdarr/ /opt/tdarr/server/Tdarr/
  ignore_errors: true
  become: true
  become_user: tdarr
  when: not tdarr_db2.stat.exists
  tags:
    - tdarr_server

- import_tasks: systemd_unit.yml
  vars:
    systemd_unit: 'tdarr-server.service'
    state: '{{ (web_version != file_version.stdout) | ansible.builtin.ternary("restarted", "started") }}'
  tags:
    - tdarr_server

- import_tasks: unbound_external_dns.yml
  tags:
    - tdarr_server

- import_tasks: reverse_proxy.yml
  tags:
    - tdarr_server

- import_tasks: backup_v4.yml
  vars:
    backup_src: '/opt/tdarr/server/Tdarr'
    backup_dest: '/backups/tdarr'
    backup_dir_name: tdarr
    backup_owner: tdarr
    backup_group: tdarr
  tags:
    - tdarr_server




